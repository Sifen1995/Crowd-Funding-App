generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  user_id       String       @id @default(uuid())
  email         String       @unique
  password_hash String
  full_name     String
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  user_roles    user_roles[]
  projects      projects[]   @relation("UserProjects")
  pledges       pledges[]    @relation("UserPledges")
}

model user_roles {
  role_id   String   @id @default(uuid())
  user_id   String
  role_name RoleName
  users     users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

enum RoleName {
  creator
  backer
  admin
}

model projects {
  project_id    String        @id @default(uuid())
  creator_id    String
  title         String
  description   String?
  funding_goal  Decimal       @db.Decimal(10, 2)
  current_funds Decimal       @default(0.00) @db.Decimal(10, 2)
  deadline      DateTime
  status        ProjectStatus @default(pending_review)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt

  creator users           @relation("UserProjects", fields: [creator_id], references: [user_id], onDelete: Cascade)
  rewards rewards[]
  pledges pledges[]
  media   project_media[]
}

enum ProjectStatus {
  pending_review
  active
  successful
  failed
  suspended
}

model rewards {
  reward_id          String    @id @default(uuid())
  project_id         String
  amount             Decimal   @db.Decimal(10, 2)
  description        String
  estimated_delivery DateTime?

  project projects  @relation(fields: [project_id], references: [project_id], onDelete: Cascade)
  pledges pledges[]
}

model pledges {
  pledge_id      String       @id @default(uuid())
  backer_id      String
  project_id     String
  reward_id      String?
  amount         Decimal      @db.Decimal(10, 2)
  transaction_id String
  status         PledgeStatus
  created_at     DateTime     @default(now())

  backer  users    @relation("UserPledges", fields: [backer_id], references: [user_id], onDelete: Cascade)
  project projects @relation(fields: [project_id], references: [project_id], onDelete: Cascade)
  reward  rewards? @relation(fields: [reward_id], references: [reward_id], onDelete: SetNull)
}

enum PledgeStatus {
  pending
  completed
  canceled
}

model project_media {
  media_id   String    @id @default(uuid())
  project_id String
  media_url  String
  media_type MediaType

  project projects @relation(fields: [project_id], references: [project_id], onDelete: Cascade)
}

enum MediaType {
  image
  video
}
